(define (iterative-improvement good-enough? improve)
  (lambda (guess)
    (if (good-enough? guess)
        guess
        ((iterative-improvement good-enough? improve) (improve guess)))))

(define (square x) (* x x))
(define (average x y)
  (/ (+ x y) 2))
(define (sqrt x)
  (define (good-enough? guess)
    (< (abs (- (square guess) x)) 0.001))
  (define (improve guess)
    (average guess (/ x guess)))
  ((iterative-improvement good-enough? improve) 1.0))
(sqrt 2)

(define tolerance 0.00001)
(define dx 0.00001)
(define (fixed-point f)
  (define (close-enough? v1)
    (< (abs (- v1 (f v1)))
       tolerance))
  (define (improve guess)
    (f guess))
  ((iterative-improvement close-enough? improve) 1.0))
(fixed-point cos)
(fixed-point (lambda (y) (+ (sin y) (cos y))))